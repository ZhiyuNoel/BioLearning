# Form implementation generated from reading ui file '../UI_files/mainWindow.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtWidgets
from subpages import Ui_encoder,Ui_eveEncoder, Ui_evePre, Ui_eveModel
from subpages import Ui_model, Ui_pred, Ui_time, Ui_inter, Ui_outputpage, Ui_inputpage


class Ui_MainWindow(object):

    def __init__(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 800)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        ## The text browser
        self.textBrowser = QtWidgets.QTextBrowser(parent=self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(9, 550, 981, 200))
        self.textBrowser.setObjectName("textBrowser")
        MainWindow.setCentralWidget(self.centralwidget)

        self.verticalLayoutWidget = QtWidgets.QWidget(parent=self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 202, 541))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetMinimumSize)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")

        ## Select input button
        self.inputButton = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        self.inputButton.setMinimumSize(QtCore.QSize(0, 50))
        self.inputButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.inputButton)

        ## Select Output button
        self.outputButton = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        self.outputButton.setMinimumSize(QtCore.QSize(0, 50))
        self.outputButton.setObjectName("pushButton_3")
        self.verticalLayout.addWidget(self.outputButton)

        ## Model Selection Button
        self.modelButton = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        self.modelButton.setMinimumSize(QtCore.QSize(0, 50))
        self.modelButton.setObjectName("pushButton_4")
        self.verticalLayout.addWidget(self.modelButton)

        ## Train autoencoder button
        self.autoencodeButton = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        self.autoencodeButton.setMinimumSize(QtCore.QSize(0, 50))
        self.autoencodeButton.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.autoencodeButton)

        ## Train prediction button
        self.predictorButton = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        self.predictorButton.setMinimumSize(QtCore.QSize(0, 50))
        self.predictorButton.setObjectName("pushButton_5")
        self.verticalLayout.addWidget(self.predictorButton)

        ## Event time button
        self.timeButton = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        self.timeButton.setMinimumSize(QtCore.QSize(0, 50))
        self.timeButton.setObjectName("pushButton_6")
        self.verticalLayout.addWidget(self.timeButton)

        ## Event Model selection button
        self.eventModelButton = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        self.eventModelButton.setMinimumSize(QtCore.QSize(0, 50))
        self.eventModelButton.setObjectName("pushButton_7")
        self.verticalLayout.addWidget(self.eventModelButton)

        ## Event predictor button
        self.eventPredictorButton = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        self.eventPredictorButton.setMinimumSize(QtCore.QSize(0, 50))
        self.eventPredictorButton.setObjectName("pushButton_8")
        self.verticalLayout.addWidget(self.eventPredictorButton)

        ## Event Autoencoder button
        self.eventEncoderButton = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        self.eventEncoderButton.setMinimumSize(QtCore.QSize(0, 50))
        self.eventEncoderButton.setObjectName("pushButton_9")
        self.verticalLayout.addWidget(self.eventEncoderButton)

        ## Interpretation button
        self.interpretationButton = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        self.interpretationButton.setEnabled(True)
        self.interpretationButton.setMinimumSize(QtCore.QSize(0, 50))
        self.interpretationButton.setObjectName("pushButton_10")
        self.verticalLayout.addWidget(self.interpretationButton)


        ## QStackedWidget
        self.stackedWidget = QtWidgets.QStackedWidget(parent=self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(220, 10, 611, 531))
        self.stackedWidget.setObjectName("stackedWidget")
        pages = [Ui_inputpage, Ui_outputpage, Ui_model, Ui_encoder, Ui_pred, Ui_time, Ui_eveModel,
                 Ui_evePre, Ui_eveEncoder, Ui_inter]

        for page in pages:
            self.insertpage = QtWidgets.QWidget()
            Page_ui = page(self.insertpage)
            self.stackedWidget.addWidget(self.insertpage)
        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1000, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.inputButton.setText(_translate("MainWindow", "Select Input"))
        self.outputButton.setText(_translate("MainWindow", "Select Output"))
        self.modelButton.setText(_translate("MainWindow", "Select Model"))
        self.autoencodeButton.setText(_translate("MainWindow", "Train Autoencoder"))
        self.predictorButton.setText(_translate("MainWindow", "Train Predictor"))
        self.timeButton.setText(_translate("MainWindow", "Event Time"))
        self.eventModelButton.setText(_translate("MainWindow", "Select Event Model"))
        self.eventPredictorButton.setText(_translate("MainWindow", "Event Predictor"))
        self.eventEncoderButton.setText(_translate("MainWindow", "Event Autoencoder"))
        self.interpretationButton.setText(_translate("MainWindow", "Interpretation"))

    def click_bind(self):
        self.predictorButton.clicked.connect(lambda: self.print_in_textBrowser("Click the train prediction button"))
        self.autoencodeButton.clicked.connect(lambda: self.print_in_textBrowser("Click the train autoencoder button"))
        self.modelButton.clicked.connect(lambda: self.print_in_textBrowser("Click the select model button"))
        self.outputButton.clicked.connect(lambda: self.print_in_textBrowser("Click the select output button"))
        self.inputButton.clicked.connect(lambda: self.print_in_textBrowser("Click the select input button"))
        self.timeButton.clicked.connect(lambda: self.print_in_textBrowser("Click the select time button"))
        self.eventModelButton.clicked.connect(lambda: self.print_in_textBrowser("Click the select event model button"))
        self.eventPredictorButton.clicked.connect(
            lambda: self.print_in_textBrowser("Click the select event predictor button"))
        self.eventEncoderButton.clicked.connect(
            lambda: self.print_in_textBrowser("Click the select event encoder button"))
        self.interpretationButton.clicked.connect(
            lambda: self.print_in_textBrowser("Click the select interpretation button"))

        self.inputButton.clicked.connect(lambda: self.page_switch_clicked(0))
        self.outputButton.clicked.connect(lambda: self.page_switch_clicked(1))
        self.modelButton.clicked.connect(lambda: self.page_switch_clicked(2))
        self.autoencodeButton.clicked.connect(lambda: self.page_switch_clicked(3))
        self.predictorButton.clicked.connect(lambda: self.page_switch_clicked(4))
        self.timeButton.clicked.connect(lambda: self.page_switch_clicked(5))
        self.eventModelButton.clicked.connect(lambda: self.page_switch_clicked(6))
        self.eventPredictorButton.clicked.connect(lambda: self.page_switch_clicked(7))
        self.eventEncoderButton.clicked.connect(lambda: self.page_switch_clicked(8))
        self.interpretationButton.clicked.connect(lambda: self.page_switch_clicked(9))

    def print_in_textBrowser(self, text):
        self.textBrowser.setText(text)

    ## 10 pages in total
    def page_switch_clicked(self, index):
        self.stackedWidget.setCurrentIndex(index)
