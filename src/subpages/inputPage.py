# Form implementation generated from reading ui file '../UI_files/inputPage.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtWidgets
from PyQt6.QtCore import pyqtSignal
from PyQt6.QtWidgets import QFileDialog
from .Pages import Pages

from src import videoPlay


class Ui_inputpage(Pages):
    _signal = pyqtSignal(str)
    text = ""
    num_file = None
    file_index = 0
    parent = None

    def __init__(self, Form):
        super().__init__()
        Form.setObjectName("Form")
        self.verticalLayoutWidget = QtWidgets.QWidget(parent=Form)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 480, 360))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.previous = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        self.previous.setObjectName("pushButton_2")
        self.horizontalLayout_2.addWidget(self.previous)
        self.select = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        self.select.setObjectName("pushButton_3")
        self.select.clicked.connect(lambda: self.slot_chooseDir())
        self.horizontalLayout_2.addWidget(self.select)

        self.next = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        self.next.setObjectName("pushButton")
        self.horizontalLayout_2.addWidget(self.next)
        self.verticalLayout.addLayout(self.horizontalLayout_2)

        self.videoDisplay = QtWidgets.QStackedWidget(parent=self.verticalLayoutWidget)
        self.videoDisplay.setObjectName("stackedWidget")
        self.verticalLayout.addWidget(self.videoDisplay)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.previous.setText(_translate("Form", "Previous"))
        self.select.setText(_translate("Form", "Select File"))
        self.next.setText(_translate("Form", "Next"))
        self.previous.setVisible(False)
        self.next.setVisible(False)
        self.next.clicked.connect(lambda: self.next_click())
        self.previous.clicked.connect(lambda: self.previous_click())
        self.select.clicked.connect(lambda: self.send_data(self.text))

    def set_video(self, fileurl, videopage):
        if fileurl == None:
            return
        else:
            videopage.set_video(fileurl, videoPlay.VideoWidget.VIDEO_TYPE_OFFLINE, False)

    def slot_chooseDir(self):  # 槽函数
        fileName, fileType = QFileDialog.getOpenFileNames(self, "Select File", "",
                                                          "All Files(*);;MP4 Files(*.txt);;AVI Files(*.avi")
        if len(fileName) == 0:
            return
        self.text = "Your Input Videos: \n"
        self.num_file = len(fileName)
        for file in fileName:
            self.previous.setVisible(True)
            self.next.setVisible(True)
            videopage = videoPlay.VideoWidget()
            videopage.setObjectName("page")
            self.videoDisplay.addWidget(videopage)
            self.set_video(file, videopage)
            self.text += ("\n" + file)

    def next_click(self):
        if self.file_index < self.num_file - 1:
            self.file_index += 1
            self.videoDisplay.setCurrentIndex(self.file_index)
        else:
            self.file_index = 0
            self.videoDisplay.setCurrentIndex(self.file_index)

    def previous_click(self):
        if self.file_index > 0:
            self.file_index -= 1
            self.videoDisplay.setCurrentIndex(self.file_index)
        else:
            self.file_index = self.num_file - 1
            self.videoDisplay.setCurrentIndex(self.file_index)

    def setParent(self, mainWindow):
        self.parent = mainWindow

    def send_data(self, str_data):
        self._signal.emit(str_data)

    @property
    def signal(self):
        return self._signal
