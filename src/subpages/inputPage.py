# Form implementation generated from reading ui file '../UI_files/inputpage.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtWidgets
from PyQt6.QtCore import pyqtSignal
from PyQt6.QtWidgets import QFileDialog
from .Pages import Pages

from src import videoPlay

'''
The components and function implementations for the input page
'''
class Ui_inputpage(Pages):
    _signal = pyqtSignal(str)
    text = ""
    num_file = None
    file_index = 0
    parent = None
    input_dict = {}

    def __init__(self, Form):
        super().__init__()
        Form.setObjectName("Form")
        self.outerLayout = QtWidgets.QWidget(parent=Form)
        self.outerLayout.setGeometry(QtCore.QRect(0, 0, 800, 531))
        self.outerLayout.setObjectName("horizontalLayoutWidget")

        self.horizontalLayout = QtWidgets.QHBoxLayout(self.outerLayout)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")

        ## Buttons
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.previous = QtWidgets.QPushButton(parent=self.outerLayout)
        self.previous.setObjectName("pushButton_2")
        self.horizontalLayout_2.addWidget(self.previous)

        self.select = QtWidgets.QPushButton(parent=self.outerLayout)
        self.select.setObjectName("pushButton_3")
        self.select.clicked.connect(lambda: self.choose_file())
        self.horizontalLayout_2.addWidget(self.select)

        self.next = QtWidgets.QPushButton(parent=self.outerLayout)
        self.next.setObjectName("pushButton")
        self.horizontalLayout_2.addWidget(self.next)
        self.verticalLayout.addLayout(self.horizontalLayout_2)

        self.videoDisplay = QtWidgets.QStackedWidget(parent=self.outerLayout)
        self.videoDisplay.setObjectName("stackedWidget")
        self.verticalLayout.addWidget(self.videoDisplay)

        # Video Display
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")

        self.label = QtWidgets.QPushButton(parent=self.outerLayout)
        self.label.setMinimumSize(QtCore.QSize(100, 50))
        self.label.setObjectName("pushButton_4")
        self.label.clicked.connect(lambda: self.choose_label())
        self.label.setEnabled(False)
        self.verticalLayout_2.addWidget(self.label)

        self.yaml = QtWidgets.QPushButton(parent=self.outerLayout)
        self.yaml.setMinimumSize(QtCore.QSize(100, 50))
        self.yaml.setObjectName("pushButton_5")
        self.yaml.clicked.connect(lambda: self.choose_yaml())
        self.verticalLayout_2.addWidget(self.yaml)

        self.sample = QtWidgets.QPushButton(parent=self.outerLayout)
        self.sample.setMinimumSize(QtCore.QSize(100, 50))
        self.sample.setObjectName("loadSample_Button")
        self.verticalLayout_2.addWidget(self.sample)

        self.clearInput = QtWidgets.QPushButton(parent=self.outerLayout)
        self.clearInput.setMinimumSize(QtCore.QSize(100, 50))
        self.clearInput.setObjectName("clearInput_Button")
        self.clearInput.clicked.connect(lambda: self.clear())
        self.verticalLayout_2.addWidget(self.clearInput)

        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.previous.setText(_translate("Form", "Previous"))
        self.select.setText(_translate("Form", "Select File"))
        self.next.setText(_translate("Form", "Next"))
        self.clearInput.setText(_translate("Form", "Clear Input"))
        self.previous.setVisible(False)
        self.next.setVisible(False)
        self.label.setText(_translate("Form", " Select Label"))
        self.yaml.setText(_translate("Form", "Load Yaml"))
        self.sample.setText(_translate("Form", "Load Sample"))
        self.clearInput.clicked.connect(lambda: self.send_data(self.text))
        self.sample.clicked.connect(lambda: self.load_samples())
        self.next.clicked.connect(lambda: self.next_click())
        self.previous.clicked.connect(lambda: self.previous_click())
        self.select.clicked.connect(lambda: self.send_data(self.text))
        self.label.clicked.connect(lambda: self.send_data(self.text))

    def set_video(self, fileurl, videopage):
        if fileurl == None:
            return
        else:
            videopage.set_video(fileurl, videoPlay.VideoWidget.VIDEO_TYPE_OFFLINE, False)

    def choose_file(self):  # 槽函数
        isVideo = True
        fileName, fileType = QFileDialog.getOpenFileNames(self, "Select File", "",
                                                          "All Files(*)")
        if len(fileName) == 0:
            return
        for file in fileName:
            print(file.split(".")[-1])
            if file.split(".")[-1] != 'avi' and file.split(".")[-1] != 'mp4':
                isVideo = False
        if isVideo:
            self.load_video(fileName)
        else:
            self.text = "Not Video"
            return

    def load_video(self, fileName):
        self.text = "Your Input Videos: \n"
        self.label.setEnabled(True)
        self.yaml.setEnabled(False)
        self.sample.setEnabled(False)
        self.num_file = len(fileName)
        self.select.setEnabled(False)
        for file in fileName:
            self.previous.setVisible(True)
            self.next.setVisible(True)
            videopage = videoPlay.VideoWidget()
            videopage.setObjectName("page")
            self.videoDisplay.addWidget(videopage)
            self.set_video(file, videopage)
            self.text += ("\n" + file.split("/")[-1])
            self.input_dict[file] = ''

    def choose_label(self):
        fileName, fileType = QFileDialog.getOpenFileNames(self, "Select File", "",
                                                          "Text Files(*.txt)")
        if len(fileName) == 0 or len(fileName) != self.num_file:
            print("false")
            self.text = "Invalid Input, Please Input Again!"
            return

        self.text = "Successfully Upload Label, The Video-Label Pair recorded as : \n"
        file_keys = list(self.input_dict.keys())
        for index in range(len(fileName)):
            label_file = fileName[index]
            video_file = file_keys[index]
            self.input_dict[video_file] = label_file
            self.text += ("Video: " + video_file.split("/")[-1] + "  Label: " + label_file.split("/")[-1] + "\n")

    def choose_yaml(self):
        yamlFile, _ = QFileDialog.getOpenFileName(self, "Select File", "",
                                                         "YAML Files(*.yaml)")
        if yamlFile == "":
            print("Quit Choose")
            return
        self.select.setEnabled(False)
        self.sample.setEnabled(False)
        self.read_yaml(yamlFile)

    def next_click(self):
        if self.file_index < self.num_file - 1:
            self.file_index += 1
            self.videoDisplay.setCurrentIndex(self.file_index)
        else:
            self.file_index = 0
            self.videoDisplay.setCurrentIndex(self.file_index)

    def previous_click(self):
        if self.file_index > 0:
            self.file_index -= 1
            self.videoDisplay.setCurrentIndex(self.file_index)
        else:
            self.file_index = self.num_file - 1
            self.videoDisplay.setCurrentIndex(self.file_index)

    def clear(self):
        self.text = ""
        self.input_dict.clear()
        self.num_file = None
        self.file_index = 0
        self.select.setEnabled(True)
        self.previous.setVisible(False)
        self.next.setVisible(False)
        self.label.setEnabled(False)
        self.yaml.setEnabled(True)
        self.select.setEnabled(True)
        self.sample.setEnabled(True)
        while self.videoDisplay.count():
            widget = self.videoDisplay.widget(0)  # 获取当前的小部件
            self.videoDisplay.removeWidget(widget)  # 从QStackedWidget中移除小部件
            widget.deleteLater()  # 删除小部件

    def setParent(self, mainWindow):
        self.parent = mainWindow

    def send_data(self, str_data):
        self._signal.emit(str_data)

    @property
    def signal(self):
        return self._signal

    '''
        Description: A prepared interface for yaml file read(Not implemented)
        input: the absolute root path of .yaml file: yamlFile
        output: The path of input videos and input labels
        '''

    def read_yaml(self, yamlFile):
        return

    '''
    Description: A prepared interface for sample given
    input: N/A
    output: Load the sample videos and labels in form of dictionary pairs
    '''

    def load_samples(self):
        return